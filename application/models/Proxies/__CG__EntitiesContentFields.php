<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class ContentFields extends \Entities\ContentFields implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setContentTypeId($contentTypeId)
    {
        $this->__load();
        return parent::setContentTypeId($contentTypeId);
    }

    public function getContentTypeId()
    {
        $this->__load();
        return parent::getContentTypeId();
    }

    public function setContentFieldTypeId($contentFieldTypeId)
    {
        $this->__load();
        return parent::setContentFieldTypeId($contentFieldTypeId);
    }

    public function getContentFieldTypeId()
    {
        $this->__load();
        return parent::getContentFieldTypeId();
    }

    public function setLabel($label)
    {
        $this->__load();
        return parent::setLabel($label);
    }

    public function getLabel()
    {
        $this->__load();
        return parent::getLabel();
    }

    public function setShortTag($shortTag)
    {
        $this->__load();
        return parent::setShortTag($shortTag);
    }

    public function getShortTag()
    {
        $this->__load();
        return parent::getShortTag();
    }

    public function setRequired($required)
    {
        $this->__load();
        return parent::setRequired($required);
    }

    public function getRequired()
    {
        $this->__load();
        return parent::getRequired();
    }

    public function setOptions($options)
    {
        $this->__load();
        return parent::setOptions($options);
    }

    public function getOptions()
    {
        $this->__load();
        return parent::getOptions();
    }

    public function setSettings($settings)
    {
        $this->__load();
        return parent::setSettings($settings);
    }

    public function getSettings()
    {
        $this->__load();
        return parent::getSettings();
    }

    public function setSort($sort)
    {
        $this->__load();
        return parent::setSort($sort);
    }

    public function getSort()
    {
        $this->__load();
        return parent::getSort();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'contentTypeId', 'contentFieldTypeId', 'label', 'shortTag', 'required', 'options', 'settings', 'sort');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}