<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class GmaRequestFinancialAdvisor extends \Entities\GmaRequestFinancialAdvisor implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getRequestId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["requestId"];
        }
        $this->__load();
        return parent::getRequestId();
    }

    public function setIsCompleteByAdvisor($isCompleteByAdvisor)
    {
        $this->__load();
        return parent::setIsCompleteByAdvisor($isCompleteByAdvisor);
    }

    public function getIsCompleteByAdvisor()
    {
        $this->__load();
        return parent::getIsCompleteByAdvisor();
    }

    public function setIsResponseByAdvisor($isResponseByAdvisor)
    {
        $this->__load();
        return parent::setIsResponseByAdvisor($isResponseByAdvisor);
    }

    public function getIsResponseByAdvisor()
    {
        $this->__load();
        return parent::getIsResponseByAdvisor();
    }

    public function setAdvisorFeedback($advisorFeedback)
    {
        $this->__load();
        return parent::setAdvisorFeedback($advisorFeedback);
    }

    public function getAdvisorFeedback()
    {
        $this->__load();
        return parent::getAdvisorFeedback();
    }

    public function setAdvisorComment($advisorComment)
    {
        $this->__load();
        return parent::setAdvisorComment($advisorComment);
    }

    public function getAdvisorComment()
    {
        $this->__load();
        return parent::getAdvisorComment();
    }

    public function setCreatedDate($createdDate)
    {
        $this->__load();
        return parent::setCreatedDate($createdDate);
    }

    public function getCreatedDate()
    {
        $this->__load();
        return parent::getCreatedDate();
    }

    public function setTemplateRequestId($templateRequestId)
    {
        $this->__load();
        return parent::setTemplateRequestId($templateRequestId);
    }

    public function getTemplateRequestId()
    {
        $this->__load();
        return parent::getTemplateRequestId();
    }

    public function setResponseDate($responseDate)
    {
        $this->__load();
        return parent::setResponseDate($responseDate);
    }

    public function getResponseDate()
    {
        $this->__load();
        return parent::getResponseDate();
    }

    public function setPortfolioId($portfolioId)
    {
        $this->__load();
        return parent::setPortfolioId($portfolioId);
    }

    public function getPortfolioId()
    {
        $this->__load();
        return parent::getPortfolioId();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'requestId', 'isCompleteByAdvisor', 'isResponseByAdvisor', 'advisorFeedback', 'advisorComment', 'createdDate', 'templateRequestId', 'responseDate', 'portfolioId');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}